{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Solution Space","text":"<p>Here, you'll find comprehensive solutions crafted by Hrushikesh Dokala. Whether you're a student seeking to understand the intricacies of these concepts or simply looking for well-documented solutions, you've come to the right place. my goal is to provide clarity and insight, enabling you to revisit and refine your approaches with ease.</p> <p>Info</p> <p>While the solutions presented here may not be optimized, they reflect my understanding and approach to solving the problems.</p> <p>Your feedback and contributions are invaluable in refining and enhancing the documentation. Feel free to join the journey and collaborate in optimizing our solutions. </p> <p>Together, we can continuously improve and excel in the realm of data structures and algorithms. </p> <p>support</p> <p>Before making any contributions, please consider starring the repository. Your support in starring the repository will greatly motivate and encourage me to continue learning and contributing more. Thank you for your support!</p> <p>Let's strive for excellence and push the boundaries of problem-solving, fostering a community where learning and growth are paramount.</p> hk's fav <p>i like the dark mode</p>"},{"location":"algorithms/","title":"Data Structures","text":""},{"location":"algorithms/#introduction","title":"Introduction","text":"<p>This website serves as a compilation of my solutions to problems from LeetCode. </p> <p>It's designed to help students grasp topics thoroughly, providing both explanations and documentation for each problem. </p> <p>This way, I can revisit and review my approaches and solutions with clarity, even after several months.</p> <p>Note</p> <p>You can look for the solutions and approach through clicking any of the data structures you might want to explore. Feel free to discuss ideas here, suggest improvements, or seek assistance via issues or pull requests.</p>"},{"location":"algorithms/#linear","title":"Linear","text":"<p>Arrays</p> <p>Stack | Queue</p> <p>Linkedlist</p>"},{"location":"algorithms/#non-linear","title":"Non Linear","text":"<p>Binary Tree</p> <p>Graphs</p>"},{"location":"algorithms/#extra","title":"Extra","text":"<p>Apps</p> <p>Math</p> <p>Strings</p>"},{"location":"apps/","title":"Apps","text":""},{"location":"apps/#introduction","title":"Introduction","text":"<p>each problem has a solution directly and other defines only the approach in function.</p>"},{"location":"apps/#algorithms.apps.library.Book","title":"<code>Book</code>","text":"<p>An instance of book in a Library</p> Source code in <code>algorithms/apps/library.py</code> <pre><code>class Book:\n    \"\"\"\n    An instance of book in a Library\n    \"\"\"\n\n    id_cnt = 1\n\n    def __init__(self, title, author, content, genre):\n        self.title = title\n        self.content = content\n        self.author = author\n        self.genre = genre\n        self.book_id = self.id_cnt\n        Book.id_cnt +=1\n\n    def display(self):\n        \"\"\"\n        Displays information about the Book\n        \"\"\"\n        print(f'ID: {self.book_id}')\n        print(f'Title: {self.title}')\n        print(f'Author: {self.author}')\n        print(f'Genre: {self.genre}')\n</code></pre>"},{"location":"apps/#algorithms.apps.library.Book.display","title":"<code>display()</code>","text":"<p>Displays information about the Book</p> Source code in <code>algorithms/apps/library.py</code> <pre><code>def display(self):\n    \"\"\"\n    Displays information about the Book\n    \"\"\"\n    print(f'ID: {self.book_id}')\n    print(f'Title: {self.title}')\n    print(f'Author: {self.author}')\n    print(f'Genre: {self.genre}')\n</code></pre>"},{"location":"apps/#algorithms.apps.library.Library","title":"<code>Library</code>","text":"<p>A Library that stores the books, authors and genre</p> Source code in <code>algorithms/apps/library.py</code> <pre><code>class Library:\n    \"\"\"\n    A Library that stores the books, authors and genre\n    \"\"\"\n\n    def __init__(self):\n        self.books = {}\n        self.recently_read = {}\n        self.genre = {}\n        self.author = {}\n\n    def add_book(self, book):\n        \"\"\"\n        Adds a Book to the Library\n        :type book: Book\n        \"\"\"\n        self.books[book.book_id] = book\n\n        if book.genre not in self.genre:\n            self.genre[book.genre] = []\n        self.genre[book.genre].append(book)\n\n        if book.autor not in self.author:\n            self.author[book.author] = []\n        self.author[book.autor].append(book)\n\n        print(f'{book.title} has been added to Library successfully')\n\n    def recently_read_book(self, book):\n        \"\"\"\n        Marks a book as recently read\n        :type book: Book\n        \"\"\"\n        self.recently_read[book.book_id] = book\n        print(f'{book.title} is your recently read book')\n\n    def display_genre(self):\n        \"\"\"\n        Display books grouped by Genre\n        \"\"\"\n        for genre, books in self.genre.items():\n            print(f'{genre} Genre:')\n            for book in books:  \n                book.display()\n\n    def display_by_author(self):\n        \"\"\"\n        Display books grouped by Authors\n        \"\"\"\n        for author, books in self.author.items():\n            print(f'{author} Author:')\n            for book in books:\n                book.display()\n\n    def books_by_author(self, author):\n        \"\"\"\n        Display books of specific author\n        :type author: str\n        \"\"\"\n        if author in self.author:\n            print(f'books by {author}:')\n            for book in self.author[author]:\n                book.display()\n        print(f'No books related to {author}')\n</code></pre>"},{"location":"apps/#algorithms.apps.library.Library.add_book","title":"<code>add_book(book)</code>","text":"<p>Adds a Book to the Library :type book: Book</p> Source code in <code>algorithms/apps/library.py</code> <pre><code>def add_book(self, book):\n    \"\"\"\n    Adds a Book to the Library\n    :type book: Book\n    \"\"\"\n    self.books[book.book_id] = book\n\n    if book.genre not in self.genre:\n        self.genre[book.genre] = []\n    self.genre[book.genre].append(book)\n\n    if book.autor not in self.author:\n        self.author[book.author] = []\n    self.author[book.autor].append(book)\n\n    print(f'{book.title} has been added to Library successfully')\n</code></pre>"},{"location":"apps/#algorithms.apps.library.Library.books_by_author","title":"<code>books_by_author(author)</code>","text":"<p>Display books of specific author :type author: str</p> Source code in <code>algorithms/apps/library.py</code> <pre><code>def books_by_author(self, author):\n    \"\"\"\n    Display books of specific author\n    :type author: str\n    \"\"\"\n    if author in self.author:\n        print(f'books by {author}:')\n        for book in self.author[author]:\n            book.display()\n    print(f'No books related to {author}')\n</code></pre>"},{"location":"apps/#algorithms.apps.library.Library.display_by_author","title":"<code>display_by_author()</code>","text":"<p>Display books grouped by Authors</p> Source code in <code>algorithms/apps/library.py</code> <pre><code>def display_by_author(self):\n    \"\"\"\n    Display books grouped by Authors\n    \"\"\"\n    for author, books in self.author.items():\n        print(f'{author} Author:')\n        for book in books:\n            book.display()\n</code></pre>"},{"location":"apps/#algorithms.apps.library.Library.display_genre","title":"<code>display_genre()</code>","text":"<p>Display books grouped by Genre</p> Source code in <code>algorithms/apps/library.py</code> <pre><code>def display_genre(self):\n    \"\"\"\n    Display books grouped by Genre\n    \"\"\"\n    for genre, books in self.genre.items():\n        print(f'{genre} Genre:')\n        for book in books:  \n            book.display()\n</code></pre>"},{"location":"apps/#algorithms.apps.library.Library.recently_read_book","title":"<code>recently_read_book(book)</code>","text":"<p>Marks a book as recently read :type book: Book</p> Source code in <code>algorithms/apps/library.py</code> <pre><code>def recently_read_book(self, book):\n    \"\"\"\n    Marks a book as recently read\n    :type book: Book\n    \"\"\"\n    self.recently_read[book.book_id] = book\n    print(f'{book.title} is your recently read book')\n</code></pre>"},{"location":"apps/#algorithms.apps.hashmap.MyHashMap","title":"<code>MyHashMap</code>","text":"<p>             Bases: <code>object</code></p> Source code in <code>algorithms/apps/hashmap.py</code> <pre><code>class MyHashMap(object):\n\n    def __init__(self, capacity=16):\n        self.capacity = capacity\n        self.buckets = [None]*capacity\n\n    def _hash(self,key):\n        return hash(key)%self.capacity\n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n        index = self._hash(key)\n        if self.buckets[index] is None:\n            self.buckets[index] = []\n        bucket = self.buckets[index]\n\n        for i,(existing_key,_) in enumerate(bucket):\n            if existing_key == key:\n                bucket[i] = (key,value)\n                return \n        bucket.append((key,value))\n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n        index = self._hash(key)\n        if self.buckets[index] is not None:\n            for existing_key, value in self.buckets[index]:\n                if existing_key == key:\n                    return value\n        return None\n\n    def remove(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n        index = self._hash(key)\n\n        if self.buckets[index] is not None:\n            for i, (existing_key, _) in enumerate(self.buckets[index]):\n                if existing_key == key:\n                    del self.buckets[index][i]\n                    return \n</code></pre>"},{"location":"apps/#algorithms.apps.hashmap.MyHashMap.get","title":"<code>get(key)</code>","text":"<p>:type key: int :rtype: int</p> Source code in <code>algorithms/apps/hashmap.py</code> <pre><code>def get(self, key):\n    \"\"\"\n    :type key: int\n    :rtype: int\n    \"\"\"\n    index = self._hash(key)\n    if self.buckets[index] is not None:\n        for existing_key, value in self.buckets[index]:\n            if existing_key == key:\n                return value\n    return None\n</code></pre>"},{"location":"apps/#algorithms.apps.hashmap.MyHashMap.put","title":"<code>put(key, value)</code>","text":"<p>:type key: int :type value: int :rtype: None</p> Source code in <code>algorithms/apps/hashmap.py</code> <pre><code>def put(self, key, value):\n    \"\"\"\n    :type key: int\n    :type value: int\n    :rtype: None\n    \"\"\"\n    index = self._hash(key)\n    if self.buckets[index] is None:\n        self.buckets[index] = []\n    bucket = self.buckets[index]\n\n    for i,(existing_key,_) in enumerate(bucket):\n        if existing_key == key:\n            bucket[i] = (key,value)\n            return \n    bucket.append((key,value))\n</code></pre>"},{"location":"apps/#algorithms.apps.hashmap.MyHashMap.remove","title":"<code>remove(key)</code>","text":"<p>:type key: int :rtype: None</p> Source code in <code>algorithms/apps/hashmap.py</code> <pre><code>def remove(self, key):\n    \"\"\"\n    :type key: int\n    :rtype: None\n    \"\"\"\n    index = self._hash(key)\n\n    if self.buckets[index] is not None:\n        for i, (existing_key, _) in enumerate(self.buckets[index]):\n            if existing_key == key:\n                del self.buckets[index][i]\n                return \n</code></pre>"},{"location":"apps/#algorithms.apps.getRandom.RandomizedSet","title":"<code>RandomizedSet</code>","text":"Source code in <code>algorithms/apps/getRandom.py</code> <pre><code>class RandomizedSet:\n    def __init__(self):\n        self.randomset = set()\n\n    def insert(self,val):\n        \"\"\"\n        :type val: int\n        :rtype : bool\n        \"\"\"\n        if val not in self.randomset:\n            self.randomset.add(val)\n            return True\n        return False\n\n    def remove(self,val):\n        \"\"\"\n        :type val: int\n        :rtype : bool\n        \"\"\"\n        if val in self.randomset:\n            self.randomset.remove(val)\n            return True\n        return False\n\n    def get_random(self):\n        \"\"\"\n        :rtype : int\n        \"\"\"\n        if len(self.randomset) &gt;=1:\n            return random.choice(list(self.randomset))\n</code></pre>"},{"location":"apps/#algorithms.apps.getRandom.RandomizedSet.get_random","title":"<code>get_random()</code>","text":"<p>:rtype : int</p> Source code in <code>algorithms/apps/getRandom.py</code> <pre><code>def get_random(self):\n    \"\"\"\n    :rtype : int\n    \"\"\"\n    if len(self.randomset) &gt;=1:\n        return random.choice(list(self.randomset))\n</code></pre>"},{"location":"apps/#algorithms.apps.getRandom.RandomizedSet.insert","title":"<code>insert(val)</code>","text":"<p>:type val: int :rtype : bool</p> Source code in <code>algorithms/apps/getRandom.py</code> <pre><code>def insert(self,val):\n    \"\"\"\n    :type val: int\n    :rtype : bool\n    \"\"\"\n    if val not in self.randomset:\n        self.randomset.add(val)\n        return True\n    return False\n</code></pre>"},{"location":"apps/#algorithms.apps.getRandom.RandomizedSet.remove","title":"<code>remove(val)</code>","text":"<p>:type val: int :rtype : bool</p> Source code in <code>algorithms/apps/getRandom.py</code> <pre><code>def remove(self,val):\n    \"\"\"\n    :type val: int\n    :rtype : bool\n    \"\"\"\n    if val in self.randomset:\n        self.randomset.remove(val)\n        return True\n    return False\n</code></pre>"},{"location":"arrays/","title":"Arrays","text":""},{"location":"arrays/#introduction","title":"Introduction","text":"<p>Each problem on the platform includes a direct solution, while others solely outline the approach within a function.</p> <p>the Approach:</p> <ul> <li> <p>convert the given num to binary using the helper function</p> </li> <li> <p>iterate through each digit and check if it is 1 </p> </li> <li> <p>and check if the ingap is True then modify the maxGap and make the curr_gap = 0 because we reached ano0ther 1</p> </li> <li> <p>else make the ingap as True cuz we entered the gap </p> </li> <li> <p>increase the curr_gap by 1 until we reach other 1</p> </li> <li> <p>return the max_gap</p> </li> </ul> <p>Given array of integers: we have to find the element in the array we part the array into 2  if target greater than middle then we do the same thing to the right list if target is less than middle then we consider the left list</p>"},{"location":"arrays/#algorithms.arrays.binarygap.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/arrays/binarygap.py</code> <pre><code>class Solution:\n    def binGap(self,num):\n        \"\"\"\n        Args:\n            num int : Input\n            max_gap int : Output\n        \"\"\"\n\n        bin_num = self.helper(num)\n        max_gap = 0\n        curr_gap = 0\n        ingap = False\n\n        for dig in bin_num:\n            if dig == '1':\n                if ingap:\n                    max_gap = max(max_gap, curr_gap)\n                    curr_gap = 0\n                else:\n                    ingap = True\n            else:\n                curr_gap +=1\n        return max_gap\n\n    # used for converting the int to binary\n    def helper(self,num):\n\n            bin_num = \"\"\n            while num &gt; 0:\n\n                dec = num%2\n                bin_num = str(dec) + bin_num\n                num = num//2\n\n            return bin_num\n</code></pre>"},{"location":"arrays/#algorithms.arrays.binarygap.Solution.binGap","title":"<code>binGap(num)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>num</code> <code>int</code> <p>Input</p> required <code>max_gap</code> <code>int</code> <p>Output</p> required Source code in <code>algorithms/arrays/binarygap.py</code> <pre><code>def binGap(self,num):\n    \"\"\"\n    Args:\n        num int : Input\n        max_gap int : Output\n    \"\"\"\n\n    bin_num = self.helper(num)\n    max_gap = 0\n    curr_gap = 0\n    ingap = False\n\n    for dig in bin_num:\n        if dig == '1':\n            if ingap:\n                max_gap = max(max_gap, curr_gap)\n                curr_gap = 0\n            else:\n                ingap = True\n        else:\n            curr_gap +=1\n    return max_gap\n</code></pre>"},{"location":"arrays/#algorithms.arrays.binarysearch.Solution","title":"<code>Solution</code>","text":"<p>             Bases: <code>object</code></p> Source code in <code>algorithms/arrays/binarysearch.py</code> <pre><code>class Solution(object):\n    def binarysearch(self, nums, target):\n        \"\"\"\n        Args:\n            nums List[int] : Input array\n            target int : element to be searched\n            target_idx int : Position of target\n\n        \"\"\"\n        left = 0\n        right = len(nums)-1\n\n        while left &lt;=right:\n            mid = (left + right)//2\n            if target == nums[mid]:\n                return mid\n            elif target &gt; nums[mid]:\n                left = mid+1\n            else:\n                right = mid-1\n\n        return -1\n</code></pre>"},{"location":"arrays/#algorithms.arrays.binarysearch.Solution.binarysearch","title":"<code>binarysearch(nums, target)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>nums</code> <code>List[int]</code> <p>Input array</p> required <code>target</code> <code>int</code> <p>element to be searched</p> required <code>target_idx</code> <code>int</code> <p>Position of target</p> required Source code in <code>algorithms/arrays/binarysearch.py</code> <pre><code>def binarysearch(self, nums, target):\n    \"\"\"\n    Args:\n        nums List[int] : Input array\n        target int : element to be searched\n        target_idx int : Position of target\n\n    \"\"\"\n    left = 0\n    right = len(nums)-1\n\n    while left &lt;=right:\n        mid = (left + right)//2\n        if target == nums[mid]:\n            return mid\n        elif target &gt; nums[mid]:\n            left = mid+1\n        else:\n            right = mid-1\n\n    return -1\n</code></pre>"},{"location":"contribution/","title":"Contribution Guidelines","text":"<p>Thank you for considering contributing to DSA Solutions! Your contributions are highly valued and essential for improving our platform. Before submitting your contributions, please take a moment to review the guidelines below:</p>"},{"location":"contribution/#types-of-contributions","title":"Types of Contributions","text":"<ul> <li>Optimization: While the existing solutions reflect the author's understanding, you're encouraged to optimize them further for efficiency.</li> <li>Documentation Enhancement: If you spot any inaccuracies, unclear explanations, or missing details in the documentation, feel free to enhance it.</li> <li>New Solutions: If you have solutions to problems not yet covered on the platform, you're welcome to submit them. Ensure they are well-explained and documented.</li> </ul>"},{"location":"contribution/#how-to-contribute","title":"How to Contribute","text":"<p>support</p> <p>Before making any contributions, please consider starring the repository. Your support in starring the repository will greatly motivate and encourage me to continue learning and contributing more. Thank you for your support!</p> <ol> <li>Fork the repository to your GitHub account.</li> <li>Clone the forked repository to your local machine.</li> <li>Create a new branch for your contributions: <code>git checkout -b my-contribution</code></li> <li>Make your desired changes or additions.</li> <li>Ensure your code adheres to the existing style and formatting.</li> <li>Test your changes locally if applicable.</li> <li>Commit your changes: <code>git commit -m \"Add my contribution\"</code></li> <li>Push your changes to your forked repository: <code>git push origin my-contribution</code></li> </ol> <p>Warning</p> <p>Before making any contributions, please ensure that you follow the provided pull request template. The template serves as a guideline for submitting your changes in a structured manner, facilitating the review process. You can find the pull request template here. Your adherence to the template is greatly appreciated. Thank you for your cooperation!</p> <p>Create a pull request (PR) to the main repository's <code>main</code> branch, detailing the changes you've made and their significance.</p>"},{"location":"contribution/#use-docker","title":"Use Docker","text":"<ol> <li>Install Docker Desktop: If you haven't already, install Docker Desktop on your local machine.</li> <li>Pull Docker Image: Pull the Docker image from Docker Hub using the following command:     <pre><code>docker pull hk669/dsadocs:latest\n</code></pre></li> <li>Start Container: Run the Docker container in detached mode and map port 8000 on your local machine to port 8000 inside the container:     <pre><code>docker run -d -p 8000:8000 hk669/dsadocs:latest\n</code></pre></li> <li>Edit Files: Once the container is running, you can edit the files locally on your machine using your preferred code editor.</li> <li>Test Changes: Verify your changes by accessing the documentation site at http://localhost:8000 in your web browser.</li> <li>Push Changes: Once you're satisfied with your changes, commit them to your forked repository and push the changes to GitHub.</li> </ol> <p>By using Docker, you can ensure a consistent development environment and easily share your contributions with others. Happy coding!</p>"},{"location":"contribution/#code-guidelines","title":"Code Guidelines","text":"<ul> <li>Follow consistent coding styles and naming conventions.</li> <li>Comment your code where necessary for clarity.</li> <li>Optimize solutions for efficiency while maintaining readability.</li> <li>Ensure your code is well-documented and easy to understand.</li> </ul>"},{"location":"contribution/#collaboration","title":"Collaboration","text":"<p>Collaboration is key to our mission of continuous improvement. Feel free to discuss ideas here, suggest improvements, or seek assistance via issues or pull requests. Let's work together to make DSA Solutions an invaluable resource for students and enthusiasts alike!</p> <p>Thank you for your contribution and dedication to advancing our understanding of data structures and algorithms. Happy coding!</p> <p>Note</p> <p>By contributing to this project, you agree to license your work under the same license as the project itself.</p>"},{"location":"graph/","title":"Graph","text":""},{"location":"graph/#introduction","title":"Introduction","text":"<p>Each problem on the platform includes a direct solution, while others solely outline the approach within a function.</p>"},{"location":"graph/#algorithms.graphs.path_exists.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/graphs/path_exists.py</code> <pre><code>class Solution:\n    def pathExists(self, n, edges, source, destination):\n        \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type source: int\n        :type destination: int\n        :rtype: bool\n        \"\"\"\n        adjacency_list = defaultdict(list)\n        # adjacency_list = {i: [] for i in range(n)}\n        for u, v in edges:\n            adjacency_list[u].append(v)\n            adjacency_list[v].append(u)\n\n        visited = set()\n\n        def dfs(node):\n            if node == destination:\n                return True\n            visited.add(node)\n            for neighbour in adjacency_list[node]:\n                if neighbour not in visited:\n                    if dfs(neighbour):\n                        return True\n\n            return False\n        return dfs(source)\n</code></pre>"},{"location":"graph/#algorithms.graphs.path_exists.Solution.pathExists","title":"<code>pathExists(n, edges, source, destination)</code>","text":"<p>:type n: int :type edges: List[List[int]] :type source: int :type destination: int :rtype: bool</p> Source code in <code>algorithms/graphs/path_exists.py</code> <pre><code>def pathExists(self, n, edges, source, destination):\n    \"\"\"\n    :type n: int\n    :type edges: List[List[int]]\n    :type source: int\n    :type destination: int\n    :rtype: bool\n    \"\"\"\n    adjacency_list = defaultdict(list)\n    # adjacency_list = {i: [] for i in range(n)}\n    for u, v in edges:\n        adjacency_list[u].append(v)\n        adjacency_list[v].append(u)\n\n    visited = set()\n\n    def dfs(node):\n        if node == destination:\n            return True\n        visited.add(node)\n        for neighbour in adjacency_list[node]:\n            if neighbour not in visited:\n                if dfs(neighbour):\n                    return True\n\n        return False\n    return dfs(source)\n</code></pre>"},{"location":"linkedlist/","title":"Linkedlist","text":""},{"location":"linkedlist/#introduction","title":"Introduction","text":"<p>Each problem on the platform includes a direct solution, while others solely outline the approach within a function.</p> <p>for more</p> <p>still updating the site, for more hit</p>"},{"location":"linkedlist/#algorithms.linkedlists.palindromeLinkedList.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/linkedlists/palindromeLinkedList.py</code> <pre><code>class Solution:\n    def palindromeLinkedList(self, head):\n        \"\"\"\n        :type head : ListNode\n        :rtype : bool\n        \"\"\"\n        if not head or not head.next:\n            return True\n        list = []\n        while head:\n            list.append(head.val)\n            head = head.next\n\n        if list == list[::-1]:\n            return True\n        else:\n            return False\n</code></pre>"},{"location":"linkedlist/#algorithms.linkedlists.palindromeLinkedList.Solution.palindromeLinkedList","title":"<code>palindromeLinkedList(head)</code>","text":"<p>:type head : ListNode :rtype : bool</p> Source code in <code>algorithms/linkedlists/palindromeLinkedList.py</code> <pre><code>def palindromeLinkedList(self, head):\n    \"\"\"\n    :type head : ListNode\n    :rtype : bool\n    \"\"\"\n    if not head or not head.next:\n        return True\n    list = []\n    while head:\n        list.append(head.val)\n        head = head.next\n\n    if list == list[::-1]:\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"linkedlist/#algorithms.linkedlists.reversLinkedList.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/linkedlists/reversLinkedList.py</code> <pre><code>class Solution:\n    def reverseLinkedList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        prev, curr = None, head     #two pointers   \n        while curr:\n            nxt = curr.next  #save the next node to iterate\n            curr.next = prev\n            prev = curr\n            curr = nxt\n\n        return prev     # return prev because the curr is Null\n</code></pre>"},{"location":"linkedlist/#algorithms.linkedlists.reversLinkedList.Solution.reverseLinkedList","title":"<code>reverseLinkedList(head)</code>","text":"<p>:type head: ListNode :rtype: ListNode</p> Source code in <code>algorithms/linkedlists/reversLinkedList.py</code> <pre><code>def reverseLinkedList(self, head):\n    \"\"\"\n    :type head: ListNode\n    :rtype: ListNode\n    \"\"\"\n    prev, curr = None, head     #two pointers   \n    while curr:\n        nxt = curr.next  #save the next node to iterate\n        curr.next = prev\n        prev = curr\n        curr = nxt\n\n    return prev     # return prev because the curr is Null\n</code></pre>"},{"location":"linkedlist/#algorithms.linkedlists.removeNthNodefromEnd.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/linkedlists/removeNthNodefromEnd.py</code> <pre><code>class Solution:\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode(0)\n        dummy.next = head\n        ptr1 = dummy\n        ptr2 = dummy\n\n        for _ in range(n+1):\n            ptr2 = ptr2.next\n\n        while ptr2 is not None:\n            ptr1 = ptr1.next\n            ptr2 = ptr2.next\n\n        ptr1.next = ptr1.next.next\n\n        return dummy.next\n</code></pre>"},{"location":"linkedlist/#algorithms.linkedlists.removeNthNodefromEnd.Solution.removeNthFromEnd","title":"<code>removeNthFromEnd(head, n)</code>","text":"<p>:type head: ListNode :type n: int :rtype: ListNode</p> Source code in <code>algorithms/linkedlists/removeNthNodefromEnd.py</code> <pre><code>def removeNthFromEnd(self, head, n):\n    \"\"\"\n    :type head: ListNode\n    :type n: int\n    :rtype: ListNode\n    \"\"\"\n    dummy = ListNode(0)\n    dummy.next = head\n    ptr1 = dummy\n    ptr2 = dummy\n\n    for _ in range(n+1):\n        ptr2 = ptr2.next\n\n    while ptr2 is not None:\n        ptr1 = ptr1.next\n        ptr2 = ptr2.next\n\n    ptr1.next = ptr1.next.next\n\n    return dummy.next\n</code></pre>"},{"location":"linkedlist/#algorithms.linkedlists.mergeKsorted.Solution","title":"<code>Solution</code>","text":"<p>             Bases: <code>object</code></p> Source code in <code>algorithms/linkedlists/mergeKsorted.py</code> <pre><code>class Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n\n        if not lists:\n            return None\n\n        return self.merge(lists, 0 , len(lists)-1)\n\n    def merge(self, lists, left, right):\n        if left == right:\n            return lists[left]\n\n        mid = (left+right)//2\n        l1 = self.merge(lists, left, mid)\n        l2 = self.merge(lists, mid+1, right)\n\n        return self.mergeTwoLists(l1, l2)\n\n    def mergeTwoLists(self, l1, l2):\n        if not l1:\n            return l2\n        elif not l2:\n            return l1\n        if l1.val &lt; l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2\n</code></pre>"},{"location":"linkedlist/#algorithms.linkedlists.mergeKsorted.Solution.mergeKLists","title":"<code>mergeKLists(lists)</code>","text":"<p>:type lists: List[ListNode] :rtype: ListNode</p> Source code in <code>algorithms/linkedlists/mergeKsorted.py</code> <pre><code>def mergeKLists(self, lists):\n    \"\"\"\n    :type lists: List[ListNode]\n    :rtype: ListNode\n    \"\"\"\n\n    if not lists:\n        return None\n\n    return self.merge(lists, 0 , len(lists)-1)\n</code></pre>"},{"location":"math/","title":"Math","text":""},{"location":"math/#introduction","title":"Introduction","text":"<p>Each problem on the platform includes a direct solution, while others solely outline the approach within a function.</p>"},{"location":"math/#algorithms.math.palindrome.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/math/palindrome.py</code> <pre><code>class Solution:\n    def palindrome(self, num):\n        \"\"\"\n        :type num: int\n        :rtype : bool\n        \"\"\"\n        rev = 0\n        if num &lt; 0:\n            x = str(num)\n            rev = x[::-1]\n        while num != 0:\n            x = num%10\n            rev = rev *10 + x\n            x/=10\n        return rev == num\n</code></pre>"},{"location":"math/#algorithms.math.palindrome.Solution.palindrome","title":"<code>palindrome(num)</code>","text":"<p>:type num: int :rtype : bool</p> Source code in <code>algorithms/math/palindrome.py</code> <pre><code>def palindrome(self, num):\n    \"\"\"\n    :type num: int\n    :rtype : bool\n    \"\"\"\n    rev = 0\n    if num &lt; 0:\n        x = str(num)\n        rev = x[::-1]\n    while num != 0:\n        x = num%10\n        rev = rev *10 + x\n        x/=10\n    return rev == num\n</code></pre>"},{"location":"stack/","title":"Stack|Queue","text":""},{"location":"stack/#introduction","title":"Introduction","text":"<p>Each problem on the platform includes a direct solution, while others solely outline the approach within a function.</p>"},{"location":"stack/#algorithms.stack.daily_temperatures.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/stack/daily_temperatures.py</code> <pre><code>class Solution:\n    def dailyTemperatures(self, temperatures):\n        \"\"\"\n        :type temperatures: List[int]\n        :rtype : List[int]\n        \"\"\"\n        n = len(temperatures)\n        answer = [0]*n\n        stack = []\n\n        for i in range(n):\n            j =i+1\n            while j &lt; n and temperatures[i] &gt; temperatures[stack[-1]]:\n                prev_idx = stack.pop()\n                answer[prev_idx] = i - prev_idx\n            stack.append(i)\n        return answer\n</code></pre>"},{"location":"stack/#algorithms.stack.daily_temperatures.Solution.dailyTemperatures","title":"<code>dailyTemperatures(temperatures)</code>","text":"<p>:type temperatures: List[int] :rtype : List[int]</p> Source code in <code>algorithms/stack/daily_temperatures.py</code> <pre><code>def dailyTemperatures(self, temperatures):\n    \"\"\"\n    :type temperatures: List[int]\n    :rtype : List[int]\n    \"\"\"\n    n = len(temperatures)\n    answer = [0]*n\n    stack = []\n\n    for i in range(n):\n        j =i+1\n        while j &lt; n and temperatures[i] &gt; temperatures[stack[-1]]:\n            prev_idx = stack.pop()\n            answer[prev_idx] = i - prev_idx\n        stack.append(i)\n    return answer\n</code></pre>"},{"location":"stack/#algorithms.stack.roman_int.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/stack/roman_int.py</code> <pre><code>class Solution:\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype : int\n        \"\"\"\n        roman = {\n            'I':1,\n            'V':5,\n            'X':10,\n            'L':50,\n            'C':100,\n            'D':500,\n            'M':1000\n        }\n\n        total = 0\n        for i in range(len(s)-1):\n            if roman[s[i]] &lt; roman[s[i+1]]:\n                total -= roman[s[i]]\n            total += roman[s[i]]\n\n        return total + roman[s[-1]]\n</code></pre>"},{"location":"stack/#algorithms.stack.roman_int.Solution.romanToInt","title":"<code>romanToInt(s)</code>","text":"<p>:type s: str :rtype : int</p> Source code in <code>algorithms/stack/roman_int.py</code> <pre><code>def romanToInt(self, s):\n    \"\"\"\n    :type s: str\n    :rtype : int\n    \"\"\"\n    roman = {\n        'I':1,\n        'V':5,\n        'X':10,\n        'L':50,\n        'C':100,\n        'D':500,\n        'M':1000\n    }\n\n    total = 0\n    for i in range(len(s)-1):\n        if roman[s[i]] &lt; roman[s[i+1]]:\n            total -= roman[s[i]]\n        total += roman[s[i]]\n\n    return total + roman[s[-1]]\n</code></pre>"},{"location":"string/","title":"String","text":""},{"location":"string/#introduction","title":"Introduction","text":"<p>Each problem on the platform includes a direct solution, while others solely outline the approach within a function.</p>"},{"location":"string/#algorithms.strings.firstpalindrome.firstPalindrome","title":"<code>firstPalindrome(words)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>words</code> <code>List[string]</code> <p>Input</p> required <code>output</code> <code>string</code> <p>Output</p> required Source code in <code>algorithms/strings/firstpalindrome.py</code> <pre><code>def firstPalindrome(words):\n    \"\"\"\n    Args:\n        words List[string] : Input\n        output string : Output\n    \"\"\"\n    for word in words:\n        if reverse(word) == word:\n            return word\n    return \"\"\n</code></pre>"},{"location":"string/#algorithms.strings.longestSubstring.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/strings/longestSubstring.py</code> <pre><code>class Solution:\n    def lengthLongestSubsequence(self,s):\n        \"\"\"\n        :type s: str\n        :rtype : int\n        \"\"\"\n\n        i = j = max_len = 0\n        substring = set()\n\n        while i &lt; len(s) and j &lt; len(s):\n            if s[i] not in substring:\n                substring.add(s[i])\n                max_len = max(max_len, i-j+1)\n                i+=1\n\n            substring.remove(s[j])\n            j+=1\n        return max_len\n</code></pre>"},{"location":"string/#algorithms.strings.longestSubstring.Solution.lengthLongestSubsequence","title":"<code>lengthLongestSubsequence(s)</code>","text":"<p>:type s: str :rtype : int</p> Source code in <code>algorithms/strings/longestSubstring.py</code> <pre><code>def lengthLongestSubsequence(self,s):\n    \"\"\"\n    :type s: str\n    :rtype : int\n    \"\"\"\n\n    i = j = max_len = 0\n    substring = set()\n\n    while i &lt; len(s) and j &lt; len(s):\n        if s[i] not in substring:\n            substring.add(s[i])\n            max_len = max(max_len, i-j+1)\n            i+=1\n\n        substring.remove(s[j])\n        j+=1\n    return max_len\n</code></pre>"},{"location":"string/#algorithms.strings.validAnagram.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/strings/validAnagram.py</code> <pre><code>class Solution:\n    def validAnagram(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype : bool\n        \"\"\"\n\n        if len(s1) == len(s2):\n\n            def helper(str):\n                char_count = {}\n\n                for s in str:\n                    if s in char_count:\n                        char_count[s] +=1\n                    else:\n                        char_count[s] = 1\n                return char_count\n\n            return helper(s1) == helper(s2)\n        return False\n</code></pre>"},{"location":"string/#algorithms.strings.validAnagram.Solution.validAnagram","title":"<code>validAnagram(s1, s2)</code>","text":"<p>:type s1: str :type s2: str :rtype : bool</p> Source code in <code>algorithms/strings/validAnagram.py</code> <pre><code>def validAnagram(self, s1, s2):\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype : bool\n    \"\"\"\n\n    if len(s1) == len(s2):\n\n        def helper(str):\n            char_count = {}\n\n            for s in str:\n                if s in char_count:\n                    char_count[s] +=1\n                else:\n                    char_count[s] = 1\n            return char_count\n\n        return helper(s1) == helper(s2)\n    return False\n</code></pre>"},{"location":"string/#algorithms.strings.validparenthesis.Solution","title":"<code>Solution</code>","text":"<p>             Bases: <code>object</code></p> Source code in <code>algorithms/strings/validparenthesis.py</code> <pre><code>class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        mapping = {\n                    ')':'(',\n                    '}':'{',\n                    \"]\":'['\n                    }\n\n        stack = []\n        for char in s:\n            if char in mapping:\n                top = stack.pop() if stack else '#'\n                if mapping[char] != top:\n                    return False\n            else:\n                stack.append(char)\n        return not stack\n</code></pre>"},{"location":"string/#algorithms.strings.validparenthesis.Solution.isValid","title":"<code>isValid(s)</code>","text":"<p>:type s: str :rtype: bool</p> Source code in <code>algorithms/strings/validparenthesis.py</code> <pre><code>def isValid(self, s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    mapping = {\n                ')':'(',\n                '}':'{',\n                \"]\":'['\n                }\n\n    stack = []\n    for char in s:\n        if char in mapping:\n            top = stack.pop() if stack else '#'\n            if mapping[char] != top:\n                return False\n        else:\n            stack.append(char)\n    return not stack\n</code></pre>"},{"location":"string/#algorithms.strings.maxScore.Solution","title":"<code>Solution</code>","text":"Source code in <code>algorithms/strings/maxScore.py</code> <pre><code>class Solution:\n    def maxScore(self,s):\n        \"\"\"\n        :type s: str\n        :rtype : int\n        \"\"\"\n        if s and len(s)&gt;1:\n            max_score = 0\n\n            for i in range(1, len(s)):\n\n                left = s[:i]\n                right = s[i:]\n\n                score = left.count('0') + right.count('1')\n                max_score = max(score, max_score)\n\n            return max_score\n\n        return max(s.count('0'),s.count('1')) \n</code></pre>"},{"location":"string/#algorithms.strings.maxScore.Solution.maxScore","title":"<code>maxScore(s)</code>","text":"<p>:type s: str :rtype : int</p> Source code in <code>algorithms/strings/maxScore.py</code> <pre><code>def maxScore(self,s):\n    \"\"\"\n    :type s: str\n    :rtype : int\n    \"\"\"\n    if s and len(s)&gt;1:\n        max_score = 0\n\n        for i in range(1, len(s)):\n\n            left = s[:i]\n            right = s[i:]\n\n            score = left.count('0') + right.count('1')\n            max_score = max(score, max_score)\n\n        return max_score\n\n    return max(s.count('0'),s.count('1')) \n</code></pre>"},{"location":"string/#algorithms.strings.reverseString.Solution","title":"<code>Solution</code>","text":"<p>             Bases: <code>object</code></p> Source code in <code>algorithms/strings/reverseString.py</code> <pre><code>class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        places = [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\n        n = len(score)\n        a = [\" \"]*n\n        d = defaultdict(int)\n\n        for i in range(n):\n            d[score[i]] = i\n        score.sort(reverse=True)\n\n        for i in range(n):\n            if i &lt; 3:\n                a[d[score[i]]] = places[i]\n            else:\n                a[d[score[i]]] = str(i+1)\n        return a\n</code></pre>"},{"location":"string/#algorithms.strings.reverseString.Solution.findRelativeRanks","title":"<code>findRelativeRanks(score)</code>","text":"<p>:type score: List[int] :rtype: List[str]</p> Source code in <code>algorithms/strings/reverseString.py</code> <pre><code>def findRelativeRanks(self, score):\n    \"\"\"\n    :type score: List[int]\n    :rtype: List[str]\n    \"\"\"\n    places = [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\n    n = len(score)\n    a = [\" \"]*n\n    d = defaultdict(int)\n\n    for i in range(n):\n        d[score[i]] = i\n    score.sort(reverse=True)\n\n    for i in range(n):\n        if i &lt; 3:\n            a[d[score[i]]] = places[i]\n        else:\n            a[d[score[i]]] = str(i+1)\n    return a\n</code></pre>"},{"location":"trees/","title":"Trees","text":""},{"location":"trees/#introduction","title":"Introduction","text":"<p>Each problem on the platform includes a direct solution, while others solely outline the approach within a function.</p>"}]}